services:
  # MySQL数据库服务
  mysql:
    image: mysql:8.0
    container_name: autotest_mysql
    environment:
      MYSQL_ROOT_PASSWORD: autotest123
      MYSQL_DATABASE: autotest_db
      MYSQL_USER: autotest
      MYSQL_PASSWORD: autotest123
      MYSQL_ROOT_HOST: '%'
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - autotest_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis缓存服务
  redis:
    image: redis:6-alpine
    container_name: autotest_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - autotest_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web应用服务
  web:
    build: .
    container_name: autotest_web
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=mysql+pymysql://autotest:autotest123@mysql:3306/autotest_db
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-production-secret-key-change-this
      - AI_API_KEY=${AI_API_KEY:-your-openai-api-key}
      - AI_MODEL=gpt-3.5-turbo
    volumes:
      - ./logs:/app/logs
      - ./reports:/app/reports
      - ./screenshots:/app/screenshots
      - ./uploads:/app/uploads
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - autotest_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery Worker服务
  worker:
    build: .
    container_name: autotest_worker
    command: celery -A app.tasks.celery worker --loglevel=info --concurrency=4
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=mysql+pymysql://autotest:autotest123@mysql:3306/autotest_db
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-production-secret-key-change-this
      - AI_API_KEY=${AI_API_KEY:-your-openai-api-key}
      - AI_MODEL=gpt-3.5-turbo
    volumes:
      - ./logs:/app/logs
      - ./reports:/app/reports
      - ./screenshots:/app/screenshots
      - ./uploads:/app/uploads
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - autotest_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "-A", "app.tasks.celery", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery Beat调度服务（可选）
  beat:
    build: .
    container_name: autotest_beat
    command: celery -A app.tasks.celery beat --loglevel=info
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=mysql+pymysql://autotest:autotest123@mysql:3306/autotest_db
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-production-secret-key-change-this
      - AI_API_KEY=${AI_API_KEY:-your-openai-api-key}
    volumes:
      - ./logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - autotest_network
    restart: unless-stopped

  # Flower监控服务（可选）
  flower:
    build: .
    container_name: autotest_flower
    command: celery -A app.tasks.celery flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - FLASK_ENV=production
      - REDIS_URL=redis://redis:6379/0
      - FLOWER_BASIC_AUTH=${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-admin123}
    depends_on:
      - redis
    networks:
      - autotest_network
    restart: unless-stopped

  # Nginx反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: autotest_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./static:/var/www/static
    depends_on:
      - web
    networks:
      - autotest_network
    restart: unless-stopped

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  autotest_network:
    driver: bridge